<div class="notebook">

<div class="nb-cell markdown">
# Welcome to cplint on SWISH

This notebook gives an overview of example programs for inference.

  - Coin ([coin.cpl](example/inference/coin.cpl),
   [coin.pl](example/inference/coin.pl)) 
   Throwing a coin with uncertainty on its fairness, 
   from J. Vennekens, S. Verbaeten, and M. Bruynooghe. 
   _Logic programs with annotated disjunctions_. 
   In International Conference on Logic Programming, 
   volume 3131 of LNCS, pages 195-209. Springer, 2004. 
   [coinmc.pl](example/inference/coinmc.pl) is a version for inference with MCINTYRE (Monte Carlo sampling).
  - Dice ([dice.cpl](example/inference/dice.cpl), 
  [dice.pl](example/inference/dice.pl)) 
  A six-sided die is repeatedly thrown until the outcome is six. 
  From J. Vennekens, S. Verbaeten, and M. Bruynooghe. 
  _Logic programs with annotated disjunctionsi_. In International Conference on Logic Programming, volume 3131 of LNCS, pages 195-209. Springer, 2004.
  - Epidemic ([epidemic.cpl](example/inference/epidemic.cpl), 
  [epidemic.pl](example/inference/epidemic.pl)) 
  Model of the development of an epidemic or a pandemic. 
  From E. Bellodi and F. Riguzzi. _Expectation Maximization over binary decision diagrams for probabilistic logic programs_. Intelligent Data Analysis, 17(2):343-363, 2013.
  - Earthquake ([earthquake.cpl](example/inference/earthquake.cpl), [earthquake.pl](example/inference/earthquake.pl)) Occurrence of an earthquake depending on its possible causes. From F. Riguzzi and N. Di Mauro. _Applying the information bottleneck to statistical relational learning_. Machine Learning, 86(1):89-114, 2012.
  - Medical symptoms ([sneezing.cpl](example/inference/sneezing.cpl), [sneezing.pl](example/inference/sneezing.pl)) Effect of flu and hay fever on the sneezing symptom. From F. Riguzzi and T. Swift. _The PITA system: Tabling and answer subsumption for reasoning under uncertainty_. Theory and Practice of Logic Programming, 27th International Conference on Logic Programming (ICLP'11) Special Issue, 11(4-5), pages 433-449, 2011.
  - Eruption ([eruption.cpl](example/inference/eruption.cpl), [eruption.pl](example/inference/eruption.pl)) Occurrence of an eruption or an earthquake at Stromboli. From Elena Bellodi and Fabrizio Riguzzi. _Structure learning of probabilistic logic programs by searching the clause space_. Theory and Practice of Logic Programming, FirstView Articles, 2014.
  - Mendelian inheritance of the color of pea plants ([mendel.cpl](example/inference/mendel.cpl), [mendel.pl](example/inference/mendel.pl)) Mendelian inheritance of the color of pea plants. From H. Blockeel. _Probabilistic logical models for mendel's experiments: An exercise_. In Inductive Logic Programming, Work in Progress Track, 2004.
  - Mendelian inheritance of human bloodtype ([bloodtype.cpl](example/inference/bloodtype.cpl), [bloodtype.pl](example/inference/bloodtype.pl)) Mendelian inheritance of the bloodtype of people. The problem is to predict the probability of the bloodtype of a person. From Wannes Meert, Jan Struyf, and Hendrik Blockeel. _CP-Logic theory inference with contextual variable elimination and comparison to BDD based inference methods_. Inductive Logic Programming. Springer Berlin Heidelberg, 2010.
  - Path ([path.cpl](example/inference/path.cpl), [path.pl](example/inference/path.pl)) Computing the probability of a path between two nodes in a probabilistic graph. Each edge has a probability of being present. From L. De Raedt, A. Kimmig, and H. Toivonen. _ProbLog: A probabilistic Prolog and its application in link discovery_. In International Joint Conference on Artificial Intelligence, pages 2462-2467, 2007.  By running the query graph(G) you can see a nice picture of the probabilistic graph.
  - Alarm Bayesian network ([alarm.cpl](example/inference/alarm.cpl), [alarm.pl](example/inference/alarm.pl)) The Alarm Bayesian network, from Figure 2 in J. Vennekens, S. Verbaeten, and M. Bruynooghe. _Logic programs with annotated disjunctions_. In International Conference on Logic Programming, volume 3131 of LNCS, pages 195-209. Springer, 2004.
  - Hidden Markov Model ([hmm.cpl](example/inference/hmm.cpl), [hmm.pl](example/inference/hmm.pl)) Hidden Markov model for modeling DNA sequences. The model has three states, q1, q2 and end, and four output symbols, a, c, g, and t, corresponding to the four nucleotides (letter). From Christiansen, H. and Gallagher, J. P. _Non-discriminating arguments and their uses_. In International Conference on Logic Programming. volume 5649 of LNCS, pages 55-69. Springer, 2009.
  - Probabilistic Context Free Grammar ([pcfg.cpl](example/inference/pcfg.cpl),
  [pcfg.pl](example/inference/pcfg.pl)) From  Taisuke Sato and Keiichi Kubota. _Viterbi training in PRISM_. Theory and Practice of Logic Programming, doi:10.1017/S1471068413000677. 
  - UWCSE: link prediction ([uwcse.cpl](example/inference/uwcse.cpl), [uwcse.pl](example/inference/uwcse.pl)) UWCSE university domain. From Wannes Meert, Jan Struyf, Hendrik Blockeel. _CP-Logic Theory Inference with Contextual Variable Elimination and Comparison to BDD Based Inference Methods_. Inductive Logic Programming, pages 96-109. Springer, 2010.
  - Cora: entity resolution ([cora.cpl](example/inference/cora.cpl), [cora.pl](example/inference/cora.pl)) The task is to compute the probability that two bibliographic citations refer to the same paper. From F. Riguzzi. _Speeding up inference for probabilistic logic programs_. The Computer Journal, 57(3):347-363, 2014 adapted from ([the Cora example in alchemy](http://alchemy.cs.washington.edu/)).
  - Monty Hall puzzle([monty.cpl](example/inference/monty.cpl), [monty.pl](example/inference/monty.pl)) From Chitta Baral, Michael Gelfond, and Nelson Rushton. _Probabilistic reasoning with answer sets_. Theory and Practice of Logic Programming 9(1), pages 57-144, 2009.
  - Three-prisoners puzzle ([jail.cpl](example/inference/jail.cpl), [jail.pl](example/inference/jail.pl)) From Peter D. Grunwald and Joseph Y. Halpern. _Updating Probabilities_. Journal of Artificial Intelligence Research 19, pages 243-278, 2003.
  - Russian roulette with two guns ([trigger.cpl](example/inference/trigger.cpl), [trigger.pl](example/inference/trigger.pl)) From J. Vennekens, Marc Denecker, and Maurice Bruynooghe. _CP-logic: A language of causal probabilistic events and its relation to logic programming_. Theory and Practice of Logic Programming, 9(3), pages 245-308, 2009.
  - Negation ([light.cpl](example/inference/light.cpl), [light.pl](example/inference/light.pl)) Example showing the use of negation. From J. Vennekens, Marc Denecker, and Maurice Bruynooghe. _CP-logic: A language of causal probabilistic events and its relation to logic programming_. Theory and Practice of Logic Programming, 9(3), pages 245-308, 2009.
  - Coins ([coin2.cpl](example/inference/coin2.cpl), [coin2.pl](example/inference/coin2.pl)) Throwing two coins with uncertainty on their fairness. From J. Vennekens, S. Verbaeten, and M. Bruynooghe. _Logic programs with annotated disjunctions_. In International Conference on Logic Programming, volume 3131 of LNCS, pages 195-209. Springer, 2004. 
  - Three sided dice ([threesideddice.cpl](example/inference/threesideddice.cpl), 
  [threesideddice.pl](example/inference/threesideddice.pl))
  A three-sided die is repeatedly thrown until the outcome is three. From F. Riguzzi and T. Swift. _The PITA system: Tabling and answer subsumption for reasoning under uncertainty_. Theory and Practice of Logic Programming, 27th International Conference on Logic Programming (ICLP'11) Special Issue, 11(4-5), pages 433-449, 2011.
  - Mendelian inheritance of the color of pea plant - larger family ([mendelc.cpl](example/inference/mendelc.cpl), [mendelc.pl](example/inference/mendelc.pl)) From H. Blockeel. _Probabilistic logical models for mendel's experiments: An exercise_. In Inductive Logic Programming, Work in Progress Track, 2004.
  - Meta probabilities ([meta.cpl](example/inference/meta.cpl), [meta.pl](example/inference/meta.pl)) Probabilities computation in the body of probabilistic clauses (also called Nested probability computation).
  - Max combining rule ([metacomb.pl](example/inference/metacomb.pl)) Meta probabilities for implementing a max combining rule. From De Raedt, Luc, and Angelika Kimmig. _Probabilistic (logic) programming concepts_. Machine Learning (2015): 1-43.
  - Drawing balls from an urn ([flexprob.pl](example/inference/flexprob.pl)) Flexible probabilities (variable probabilistic annotations) that are instantiated at run time. From De Raedt, Luc, and Angelika Kimmig. _Probabilistic (logic) programming concepts_. Machine Learning (2015): 1-43.
  - Sampling persons ([persons.pl](example/inference/persons.pl)) The example models drawing a person at random from a population and computing the probability that it is a male or a female using flexible probabilities (variable probabilistic annotations). From J. Vennekens, S. Verbaeten, and M. Bruynooghe. _Logic programs with annotated disjunctions_. In International Conference on Logic Programming,
  volume 3131 of LNCS, pages 195-209. Springer, 2004.
  - Probabilistic Context Free Left Recursive Grammar. Since the grammar is 
  left recursive, derivations may be infinite so the query may have an infinite
  number of explanations and PITA may not terminate. 
  To ensure termination, a bound on the depth of the derivations of PITA can 
  be imposed ([pcfglrdb.pl](example/inference/pcfglrdb.pl)), at the price 
  of getting only a lower bound on the probability. 
  Alternatively, MCINTYRE can be used 
  ([pcfglr.pl](example/inference/pcfglr.pl))
  that performs approximate inference by sampling and termination is ensured 
  because the infinite branches have probability 0. 
  From Taisuke Sato and Keiichi Kubota. _Viterbi training in PRISM_. 
  Theory and Practice of Logic Programming, doi:10.1017/S1471068413000677. 
  - Model checking of a Markov chain. We want to know what is the likelihood
  that on an execution of the chain from a start state _s_, a final state _t_
  will be reached? The chains may be infinite so the query may have an infinite number of explanations and PITA may not terminate. To ensure termination, a bound on the depth of the derivations of PITA can be imposed 
  ([markov_chaindb.pl](example/inference/markov_chaindb.pl)).
  Alternatively, MCINTYRE can be used
  ([markov_chain.pl](example/inference/markov_chain.pl)).
  From
  Gorlin, Andrey, C. R. Ramakrishnan, and Scott A. Smolka. _Model checking with probabilistic tabled logic programming._ Theory and Practice of Logic Programming 12.4-5 (2012).
  - Prefix probability computation. ([prefix.pl](example/inference/prefix.pl))
  Prefix parser for probabilistic context free grammars.
  The program computes the probability that a string is
  a prefix of a string genated by the grammar.
  From
  T. Sato, P. Meyer, _Tabling for infinite probability computation_, in:
  Intnational Confence on Logic Programming, Vol. 17 of LIPIcs, 2012,
  pp.  348-358.
  T. Sato, P. Meyer, _Infinite probability computation by cyclic explanation
  graphs_, Theory and Practice of Logic Programming 14 (2014) 909-937.
  doi:10.1017/S1471068413000562.
  - Querying a deterministic database ([testdb.pl](example/inference/testdb.pl))
  Deterministic predicates can be defined outside `:-begin/end_lpad.` and 
  queried in the body of probabilistic clauses.
  - Existence uncertainty/unknown objects. 
  The programs models a domain where the number of objects is uncertain.
  In particular, the number of objects follows a geometric distribution
  with parameter 0.3.
  We can ask what is the probability that the object number n exists.
  The goal has an infinite number of explanations so we have to either
  set a depth bound ([var_objdb.pl](example/inference/var_objdb.pl)) or
  use approximate inference ([var_obj.pl](example/inference/var_obj.pl)).
  From
  Poole, David. _The independent choice logic and beyond._ Probabilistic
  inductive logic programming. Springer Berlin Heidelberg, 2008. 222-243.
  - Probabilistic Left-Corner Grammar ([plcg.pl](example/inference/plcg.pl)) 
  A grammar using the rules of a
  context free grammar as a PCFG  but using a shift-reduce parser with 
  probabilities assigned to shift-reduce operations. Version with a left
  recursive grammar with MCINTYRE for inference.
  From Sato, Taisuke, Yoshitaka Kameya, and Kenichi Kurihara. 
  _Variational Bayes via propositionalized probability computation in PRISM._ 
  Annals of Mathematics and Artificial Intelligence 54.1-3 (2008): 135-158.
  - Prefix parser for a Probabilistic Left-Corner Grammar 
  ([pre_plcg.pl](example/inference/pre_plcg.pl)) From
  T. Sato, P. Meyer, _Tabling for infinite probability computation_, in:
  Intnational Confence on Logic Programming, Vol. 17 of LIPIcs, 2012,
  pp.  348-358.
  T. Sato, P. Meyer, _Infinite probability computation by cyclic explanation
  graphs_, Theory and Practice of Logic Programming 14 (2014) 909-937.
  doi:10.1017/S1471068413000562.
  - Model checking of the Synchronous Leader Election Protocol expressed in 
  Probabilistic Computation Tree Logic (PCTL).
  ([pctl_slep.pl](example/inference/pctl_slep.pl)) 
  From
  Gorlin, Andrey, C. R. Ramakrishnan, and Scott A. Smolka. "Model checking with 
  probabilistic tabled logic programming." Theory and Practice of Logic 
  Programming 12.4-5 (2012): 681-700.
  This program was kindly provided by Andrey Gorlin and adapted to MCINTYRE
  by Fabrizio Riguzzi.
  - Model checker for fuzzy formulas in generalized probabilistic logic,
  an expressive logic based on the modal mu-calculus for probabilistic
  systems. ([gpl.pl](example/inference/gpl.pl)) 
  From
  Gorlin, Andrey, C. R. Ramakrishnan, and Scott A. Smolka. "Model checking with 
  probabilistic tabled logic programming." Theory and Practice of Logic 
  Programming 12.4-5 (2012): 681-700.
  This program was kindly provided by Andrey Gorlin and adapted to MCINTYRE
  by Fabrizio Riguzzi.
  - Model checker for Recursive Markov Chains expressed in
  generalized probabilistic logic. ([rmc.pl](example/inference/rmc.pl)) 
  From
  Gorlin, Andrey, C. R. Ramakrishnan, and Scott A. Smolka. "Model checking 
  with probabilistic tabled logic programming." 
  Theory and Practice of Logic Programming 12.4-5 (2012): 681-700.
  This program was kindly provided by Andrey Gorlin and adapted to MCINTYRE
  by Fabrizio Riguzzi.
  - Hidden Markov model for part-of-speech tagging.  ([hmmpos.pl](example/inference/hmmpos.pl))
  The states represent parts-of-speech, and the symbols emitted by the states 
  are words. The assumption is that a word depends probabilistically on just 
  its own part-of-speech (i.e. its tag) which in turn depends on the 
  part-of-speech of the preceding word (or on the start state in case 
  there is no preceding word).
  From
  http://www.ling.gu.se/~lager/Spaghetti/spaghetti.html
  Original program by Torbjorn Lager, adapted to MCINTYRE by Fabrizio Riguzzi.
  Argument sampling to approximately compute the Viterbi path (most probable
  tagging).
  - 1st- and 2nd-order Hidden Markov model for part-of-speech tagging ([hmmpos2.pl](example/inference/hmmpos2.pl)).
  This program differs from ([hmmpos.pl](example/inference/hmmpos.pl)) because
    1. a 1st-order HMM and a 2nd-order HMM are included
    2. the probabilistic predicates =trans/3=, =trans2/4=, =out/3= and =out2/4= are defined intensionally
    3. the probability values are defined on the basis of frequency data from a
       (toy in this example) dataset
  
  From
  http://stp.lingfil.uu.se/~nivre/docs/thesis3.pdf
  Original program by Joakim Nivre and Torbjorn Lager, adapted to MCINTYRE by Fabrizio Riguzzi
</div>
</div>
